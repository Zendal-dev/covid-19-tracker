{"version":3,"sources":["components/CountrySelect/CountrySelect.module.scss","components/CardItem/CardItem.jsx","components/Cards/Cards.jsx","components/CountrySelect/CountrySelect.jsx","components/Chart/Chart.jsx","components/CountriesList/CountriesList.jsx","components/common/Loader/Loader.jsx","context/covidContext.js","App.js","context/types.js","context/covidReducer.js","api/index.js","context/CovidState.jsx","index.js","components/common/Loader/Loader.module.scss","components/CountriesList/CountriesList.module.scss","components/CardItem/CardItem.module.scss"],"names":["module","exports","CardItem","name","value","type","lastUpdate","description","currentDate","Date","toLocaleDateString","Grid","item","Card","CardContent","className","cn","s","Typography","color","gutterBottom","variant","start","end","duration","separator","statNames","confirmed","text","recovered","deaths","Cards","data","mappedData","spacing","justify","container","Object","keys","map","key","CountrySelect","countries","isLoading","handleCountryChange","Box","display","alignItems","justifyContent","marginTop","marginBottom","small","fast","NativeSelect","onChange","e","currentTarget","Chart","country","xs","md","labels","datasets","hoverBackgroundColor","borderWidth","borderColor","backgroundColor","options","legend","title","animation","easing","CountriesList","countriesStats","countriesList","length","filter","index","TableRow","TableCell","padding","fontSize","fontWeight","component","center","Table","TableBody","React","memo","Loader","viewBox","cx","cy","r","fill","strokeWidth","CovidContext","createContext","App","useContext","stats","isFetchingCountriesStats","isFetchingCovidStats","fetchCovidStats","fetchCountries","fetchCountryStats","fetchCountriesStats","useEffect","Container","maxWidth","textAlign","SET_COVID_STATS","SET_COUNTRIES","SET_COUNTRY","SET_COUNTRIES_STATS","SET_IS_FETCHING_COVID_STATS","SET_IS_FETCHING_COUNTRIES_STATS","handlers","state","payload","covidReducer","action","DEFAULT","instance","axios","create","baseURL","getStats","url","a","get","covid","fetchGeneralStats","console","error","initialState","CovidState","children","useReducer","dispatch","setFetchingCovidStats","bool","setFetchingCountriesStats","filteredCountries","res","countryStats","push","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.14dc59b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"CountrySelect_select__2vApv\"};","import { Card, CardContent, Grid, Typography } from '@material-ui/core'\r\nimport CountUp from 'react-countup'\r\nimport cn from 'classnames'\r\n\r\nimport * as s from './CardItem.module.scss'\r\n\r\nconst CardItem = ({ name, value, type, lastUpdate, description }) => {\r\n   const currentDate = new Date(lastUpdate).toLocaleDateString()\r\n\r\n   return (\r\n      <Grid item>\r\n         <Card>\r\n            <CardContent className={ cn(s.card, s[type]) }>\r\n               <Typography color=\"textSecondary\" gutterBottom>{ name }</Typography>\r\n               <Typography variant=\"h5\">\r\n                  <CountUp\r\n                     start={ 0 }\r\n                     end={ value }\r\n                     duration={ 1 }\r\n                     separator=\",\"\r\n                  />\r\n               </Typography>\r\n               <Typography color=\"textSecondary\">{ currentDate }</Typography>\r\n               <Typography variant=\"body2\">{ description }</Typography>\r\n            </CardContent>\r\n         </Card>\r\n      </Grid>\r\n   )\r\n}\r\n\r\nexport default CardItem","import CardItem from '../CardItem/CardItem'\r\nimport { Grid } from '@material-ui/core'\r\n\r\nconst statNames = {\r\n   confirmed: {\r\n      name: 'Инфецировано',\r\n      text: 'Число заболевших'\r\n   },\r\n   recovered: {\r\n      name: 'Выздоровело',\r\n      text: 'Число вылечившихся'\r\n   },\r\n   deaths: {\r\n      name: 'Летальные исходы',\r\n      text: 'Число умерших'\r\n   }\r\n}\r\n\r\nconst Cards = ({ data }) => {\r\n   const { lastUpdate, ...mappedData } = data\r\n\r\n   return (\r\n      <Grid spacing={ 3 } justify=\"center\" container>\r\n         { Object.keys(mappedData).map(key => (\r\n            <CardItem\r\n               key={ key }\r\n               name={ statNames[key].name }\r\n               description={ statNames[key].text }\r\n               value={ data[key] }\r\n               type={ key }\r\n               lastUpdate={ lastUpdate }\r\n            />\r\n         )) }\r\n      </Grid>\r\n   )\r\n}\r\n\r\nexport default Cards","import { Box, NativeSelect } from '@material-ui/core'\r\nimport * as s from './CountrySelect.module.scss'\r\nimport { Loader } from '../index'\r\n\r\nconst CountrySelect = ({ countries, isLoading, handleCountryChange }) => {\r\n   return (\r\n      <Box display=\"flex\" alignItems=\"flex-end\" justifyContent=\"center\" marginTop={7} marginBottom={7}>\r\n         { isLoading && <Loader small fast /> }\r\n         <NativeSelect className={s.select} onChange={ e => handleCountryChange(e.currentTarget.value) }>\r\n            <option value=\"all\">Весь мир</option>\r\n\r\n            { countries.map(item => (\r\n               <option\r\n                  key={item.name}\r\n                  value={item.name}\r\n               >\r\n                  { item.name }\r\n               </option>\r\n            )) }\r\n         </NativeSelect>\r\n      </Box>\r\n   )\r\n}\r\n\r\nexport default CountrySelect","import { Bar } from '@reactchartjs/react-chart.js'\r\nimport { Grid } from '@material-ui/core'\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n   return (\r\n      <Grid item xs={12} md={8}>\r\n         <Bar\r\n            type=\"bar\"\r\n            data={ {\r\n               labels: ['Инфецировано', 'Выздоровело', 'Летальные исходы'],\r\n               datasets: [{\r\n                  hoverBackgroundColor: [\r\n                     'rgba(0, 0, 255, .5)',\r\n                     'rgba(0, 255, 0, .5)',\r\n                     'rgba(255, 0, 0, .5)'\r\n                  ],\r\n                  borderWidth: 1,\r\n                  borderColor: [\r\n                     'rgba(0, 0, 255, .5)',\r\n                     'rgba(0, 255, 0, .5)',\r\n                     'rgba(255, 0, 0, .5)'\r\n                  ],\r\n                  backgroundColor: [\r\n                     'rgba(0, 0, 255, .3)',\r\n                     'rgba(0, 255, 0, .3)',\r\n                     'rgba(255, 0, 0, .3)'\r\n                  ],\r\n                  data: [confirmed, recovered, deaths]\r\n               }],\r\n            } }\r\n            options={{\r\n               legend: false,\r\n               title: {\r\n                  display: true,\r\n                  text: `Актуальная статистика ${ country || 'Всем мире' }`\r\n               },\r\n               animation: {\r\n                  duration: 250,\r\n                  easing: 'linear',\r\n               }\r\n            }}\r\n         />\r\n      </Grid>\r\n   )\r\n}\r\n\r\nexport default Chart","import React from 'react'\r\nimport { Box, Grid, Table, TableBody, TableCell, TableRow } from '@material-ui/core'\r\n\r\nimport { Loader } from '../index'\r\n\r\nimport * as s from './CountriesList.module.scss'\r\n\r\nconst CountriesList = ({ countriesStats, countries, isLoading }) => {\r\n   const countriesList = countriesStats.length > 0\r\n      ? countriesStats\r\n         .filter(item => item)\r\n         .map((item, index) => (\r\n            <TableRow key={ index }>\r\n               <TableCell className={ s.cell } padding=\"none\">{ countries[index].name }</TableCell>\r\n               <TableCell className={ s.cell } padding=\"none\">{ item.confirmed }</TableCell>\r\n            </TableRow>\r\n         ))\r\n      : [];\r\n\r\n   return (\r\n      <Grid item xs={ 8 } md={ 4 }>\r\n         <Box marginTop={ 5 }>\r\n            <Box fontSize=\"1.1rem\" fontWeight={ 500 } marginBottom={ 1 } component=\"p\">Подтвержденные случаи по\r\n               странам</Box>\r\n            <div className={ s.tableWrapper }>\r\n               {\r\n                  isLoading || countriesList.length === 0\r\n                  ? <Loader center />\r\n                  : (<Table>\r\n                        <TableBody>\r\n                           { countriesList }\r\n                        </TableBody>\r\n                     </Table>)\r\n               }\r\n            </div>\r\n         </Box>\r\n      </Grid>\r\n   )\r\n}\r\n\r\nexport default React.memo(CountriesList)","import cn from 'classnames'\r\nimport * as s from './Loader.module.scss'\r\n\r\nconst Loader = ({ small, center, fast }) => (\r\n   <div className={ cn({ [s.center]: center }) }>\r\n      <svg className={ cn(s.spinner, { [s.small]: small, [s.fast]: fast }) } viewBox=\"0 0 50 50\">\r\n         <circle className={ s.path } cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" strokeWidth=\"5\" />\r\n      </svg>\r\n   </div>\r\n)\r\n\r\nexport default Loader","import { createContext } from 'react'\r\n\r\nconst CovidContext = createContext(null)\r\n\r\nexport default CovidContext","import { useEffect, useContext } from 'react'\n\nimport { Box, Container, Grid } from '@material-ui/core'\nimport { Cards, Chart, CountriesList, CountrySelect } from './components'\n\nimport CovidContext from './context/covidContext'\n\nconst App = () => {\n   const {\n      stats,\n      countries,\n      countriesStats,\n      country,\n      isFetchingCountriesStats,\n      isFetchingCovidStats,\n      fetchCovidStats,\n      fetchCountries,\n      fetchCountryStats,\n      fetchCountriesStats\n   } = useContext(CovidContext)\n\n   useEffect(() => {\n      fetchCovidStats()\n      fetchCountries()\n      // eslint-disable-next-line\n   }, [])\n\n   useEffect(() => {\n      fetchCountriesStats()\n      // eslint-disable-next-line\n   }, [countries])\n\n   return (\n      <Container maxWidth=\"lg\">\n         <Box\n            component=\"h1\"\n            fontSize=\"5rem\"\n            textAlign=\"center\"\n            fontWeight={ 700 }\n         >\n            Covid-19\n         </Box>\n\n         <Cards data={ stats }/>\n         <CountrySelect\n            isLoading={ isFetchingCovidStats }\n            handleCountryChange={ fetchCountryStats }\n            countries={ countries }\n         />\n\n         <Grid container justify=\"center\" spacing={ 3 }>\n            <Chart\n               data={ stats }\n               country={ country }\n            />\n            <CountriesList\n               countries={ countries }\n               isLoading={ isFetchingCountriesStats }\n               countriesStats={ countriesStats }\n            />\n         </Grid>\n      </Container>\n   )\n}\n\nexport default App\n","export const SET_COVID_STATS = 'SET_COVID_STATS'\r\nexport const SET_COUNTRIES = 'SET_COUNTRIES'\r\nexport const SET_COUNTRY = 'SET_COUNTRY'\r\nexport const SET_COUNTRIES_STATS = 'SET_COUNTRIES_STATS'\r\nexport const SET_IS_FETCHING_COVID_STATS = 'SET_IS_FETCHING_COVID_STATS'\r\nexport const SET_IS_FETCHING_COUNTRIES_STATS = 'SET_IS_FETCHING_COUNTRIES_STATS'\r\n\r\n","import {\r\n   SET_COUNTRIES,\r\n   SET_COVID_STATS,\r\n   SET_COUNTRY,\r\n   SET_COUNTRIES_STATS,\r\n   SET_IS_FETCHING_COVID_STATS,\r\n   SET_IS_FETCHING_COUNTRIES_STATS\r\n} from './types'\r\n\r\nconst handlers = {\r\n   [SET_COVID_STATS]: (state, { payload }) => ({ ...state, stats: { ...payload } }),\r\n   [SET_COUNTRIES]: (state, { payload }) => ({ ...state, countries: [ ...payload ] }),\r\n   [SET_COUNTRY]: (state, { payload }) => ({ ...state, country: payload }),\r\n   [SET_COUNTRIES_STATS]: (state, { payload }) => ({ ...state, countriesStats: [ ...payload ] }),\r\n   [SET_IS_FETCHING_COVID_STATS]: (state, { payload }) => ({ ...state, isFetchingCovidStats: payload }),\r\n   [SET_IS_FETCHING_COUNTRIES_STATS]: (state, { payload }) => ({ ...state, isFetchingCountriesStats: payload }),\r\n   DEFAULT: state => state\r\n}\r\n\r\nconst covidReducer = (state, action) => {\r\n   const handler = handlers[action.type] || handlers.DEFAULT\r\n   return handler(state, action)\r\n}\r\n\r\nexport default covidReducer","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n   baseURL: 'https://covid19.mathdro.id/api'\r\n})\r\n\r\nconst getStats = async url => {\r\n   const { data: { confirmed, recovered, deaths, lastUpdate } } = await instance.get(url)\r\n\r\n   return {\r\n      confirmed: confirmed.value,\r\n      recovered: recovered.value,\r\n      deaths: deaths.value,\r\n      lastUpdate\r\n   }\r\n}\r\n\r\nconst covid = {\r\n   async fetchGeneralStats() {\r\n      try {\r\n         const { confirmed, recovered, deaths, lastUpdate } = await getStats()\r\n\r\n         return { confirmed, recovered, deaths, lastUpdate }\r\n      } catch(e) {\r\n         console.error('fetchGeneralStats', e)\r\n      }\r\n   },\r\n\r\n   async fetchCountries() {\r\n      try {\r\n         const { data: { countries } } = await instance.get('countries')\r\n\r\n         return countries\r\n      } catch(e) {\r\n         console.error('fetchCountries', e)\r\n      }\r\n   },\r\n\r\n   async fetchCountryStats(country) {\r\n      try {\r\n         const { confirmed, recovered, deaths } = await getStats(`countries/${country}`)\r\n\r\n         return { confirmed, recovered, deaths }\r\n      } catch(e) {\r\n         console.error('fetchCountryStats', e)\r\n      }\r\n   }\r\n}\r\n\r\nexport default covid","import { useReducer } from 'react'\r\nimport CovidContext from './covidContext'\r\nimport covidReducer from './covidReducer'\r\nimport {\r\n   SET_COUNTRIES,\r\n   SET_COUNTRIES_STATS,\r\n   SET_COUNTRY,\r\n   SET_COVID_STATS,\r\n   SET_IS_FETCHING_COUNTRIES_STATS,\r\n   SET_IS_FETCHING_COVID_STATS\r\n} from './types'\r\nimport covid from '../api'\r\n\r\nconst initialState = {\r\n   stats: {},\r\n   countries: [],\r\n   countriesStats: [],\r\n   country: null,\r\n   isFetchingCountriesStats: false,\r\n   isFetchingCovidStats: false\r\n}\r\n\r\nconst CovidState = ({ children }) => {\r\n   const [state, dispatch] = useReducer(covidReducer, initialState)\r\n   const {\r\n      stats,\r\n      countries,\r\n      countriesStats,\r\n      country,\r\n      isFetchingCountriesStats,\r\n      isFetchingCovidStats\r\n   } = state\r\n\r\n   const setFetchingCovidStats = bool => dispatch({ type: SET_IS_FETCHING_COVID_STATS, payload: bool })\r\n   const setFetchingCountriesStats = bool => dispatch({ type: SET_IS_FETCHING_COUNTRIES_STATS, payload: bool })\r\n\r\n   const fetchCovidStats = async () => {\r\n      setFetchingCovidStats(true)\r\n      const stats = await covid.fetchGeneralStats()\r\n      setFetchingCovidStats(false)\r\n      dispatch({ type: SET_COVID_STATS, payload: stats })\r\n   }\r\n\r\n   const fetchCountries = async () => {\r\n      const data = await covid.fetchCountries()\r\n      const filteredCountries = data.filter(country => country.name !== 'Gambia') // this country is not in the database\r\n\r\n      dispatch({ type: SET_COUNTRIES, payload: filteredCountries })\r\n   }\r\n\r\n   const fetchCountryStats = async country => {\r\n      if (country !== 'all') {\r\n         setFetchingCovidStats(true)\r\n\r\n         const stats = await covid.fetchCountryStats(country)\r\n         dispatch({ type: SET_COVID_STATS, payload: stats })\r\n\r\n         setFetchingCovidStats(false)\r\n      } else {\r\n         fetchCovidStats()\r\n      }\r\n\r\n      dispatch({\r\n         type: SET_COUNTRY,\r\n         payload: country !== 'all' ? country : null\r\n      })\r\n   }\r\n\r\n   const fetchCountriesStats = async () => {\r\n      setFetchingCountriesStats(true)\r\n\r\n      const res = []\r\n\r\n      try {\r\n         if (countries.length > 0) {\r\n            for (const country of countries) {\r\n               const countryStats = await covid.fetchCountryStats(country.name)\r\n               res.push(countryStats)\r\n            }\r\n         }\r\n      } catch (e) {\r\n         console.error('fetchCountriesStats', e)\r\n      } finally {\r\n         setFetchingCountriesStats(false)\r\n         dispatch({ type: SET_COUNTRIES_STATS, payload: res })\r\n      }\r\n   }\r\n\r\n   return (\r\n      <CovidContext.Provider value={{\r\n         fetchCovidStats, fetchCountries,\r\n         fetchCountryStats, fetchCountriesStats,\r\n         stats, countries, country, countriesStats,\r\n         isFetchingCountriesStats, isFetchingCovidStats\r\n      }}>\r\n         { children }\r\n      </CovidContext.Provider>\r\n   )\r\n}\r\n\r\nexport default CovidState","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport CovidState from './context/CovidState'\n\nimport './index.scss'\n\nReactDOM.render(\n   <React.StrictMode>\n      <CovidState>\n         <App/>\n      </CovidState>\n   </React.StrictMode>,\n   document.getElementById('root')\n)\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"center\":\"Loader_center__3K0uA\",\"spinner\":\"Loader_spinner__LDYWH\",\"rotate\":\"Loader_rotate__1aCys\",\"path\":\"Loader_path__2Nl2P\",\"dash\":\"Loader_dash__2ueTb\",\"small\":\"Loader_small__1NbJD\",\"fast\":\"Loader_fast__1P3eN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"CountriesList_title__zlQAc\",\"cell\":\"CountriesList_cell__3F0cl\",\"tableWrapper\":\"CountriesList_tableWrapper__3VMC8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"CardItem_card__1lSfp\",\"confirmed\":\"CardItem_confirmed__2uEaA\",\"recovered\":\"CardItem_recovered__3aVev\",\"deaths\":\"CardItem_deaths__3-9H1\"};"],"sourceRoot":""}